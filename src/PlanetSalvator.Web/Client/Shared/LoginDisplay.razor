@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager _navigation
@inject AuthenticationStateProvider _authenticationStateProvider
@inject SignOutSessionStateManager _signOutManager
@inject HttpClient _httpClient


<div class="top-row ps-3">
    <div class="container-fluid">
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon text-black"></span>
        </button>
    </div>
</div>
<AuthorizeView>
    <Authorized>
        <Popover OnVisibleChange="OnVisibleChange" Visible="_visible" ContentTemplate="_content" Title="Hello world" Trigger="@(new[] {Trigger.Click})">
            <div class="d-flex justify-content-center align-items-center h-auto hovered-color-blue container" role="button">
                <span class="d-flex flex-column justify-content-end">
                    <span class="text-white text-truncate">@context.User.Identity.Name</span>
                    <span class="text-white text-truncate">@Points points</span>
                </span>
                <Avatar Style="@($"background-color: {color}; vertical-align: middle;")" Size="large">
                    @context.User.Identity.Name[0]
                </Avatar>
            </div>
        </Popover>
    </Authorized>

    <NotAuthorized>
        <a href="authentication/register">S'enregistrer</a>
        <a href="authentication/login">Se connecter</a>
    </NotAuthorized>
</AuthorizeView>

@code {

    public string color { get; set; } = "#c4c4c4";
    public int Points { get; set; } = -1;


    private RenderFragment _content =
        @<p>Hello content</p>;


    private bool _visible = false;

    protected override async Task OnInitializedAsync()
    {
        var authenticatedState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var email = authenticatedState.User.Identity.Name;

        Points = await _httpClient.GetFromJsonAsync<int>($"api/UserPoints?email={email}");
    }

    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private
    void OnVisibleChange(bool visible)
    {
        _visible = visible;
    }


        private async Task BeginSignOut(MouseEventArgs args)
        {
            await _signOutManager.SetSignOutState();
            _navigation.NavigateTo("authentication/logout");
        }
}