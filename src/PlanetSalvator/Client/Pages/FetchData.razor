@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PlanetSalvator.Infrastructure.Models.NaturalEvent
@using PlanetSalvator.Shared

@using PlanetSalvator.ComponentsLibrary;

@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<AuthenticationRegisterForm/>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Description</td>
                    <td>@forecast.Events</td>
                    <td>@forecast.Link</td>
                    <td>@forecast.Title</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private NaturalEvent[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            /*
             * public partial class NaturalEvent
    : FetchableData
{
    [JsonProperty("title")]
    public string Title { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("link")]
    public Uri Link { get; set; }

    [JsonProperty("events")]
    public List<Event> Events { get; set; }
}             */

            forecasts = new NaturalEvent[]
            {
                new NaturalEvent
                {
                    Title = "Asteroid",
                    Description = "Asteroid",
                    Link = new Uri("https://www.google.com"),
                    Events = new List<Event>
                    {
                        new Event
                        {
                            Title = "Asteroid",
                            Description = Description.Empty,
                            Link = new Uri("https://www.google.com"),
                        }
                    }
                },
            };
    //forecasts = await Http.GetFromJsonAsync<NaturalEvent[]>("WeatherForecast");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
